:DOC-CONFIG:
#+STARTUP: hidestars
 # hide leading stars (easier to read)
#+STARTUP: fold
 # collapse content only
#+TAGS: TEMPORARY(t) BROKEN(b) DISABLED(d)
 # set tags <TAG_NAME>(<shortname>)
#+PROPERTY: header-args:emacs-lisp :tangle config.el
#+PROPERTY: header-args :mkdirp yes :comments no
 # Default tangle in config.el
:END:

#+title: Emacs config
#+email: matteo.rogora@live.it
#+author: Matteo Rogora

* Overview
Following zamboni's [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][Doom org config]]
configs are separated into 3 files:
- =init.el=: Doom modules to load
- =packages.el=: Packages to install
- =config.el=: Custom config

After a first setup, this file will only write =packages.el= and =config.el=

** Working with this file
To osetup doom emacs using this org file:

1. Save this file into the =~/.config/doom/= directory
   #+begin_src sh :tangle no
     cp "config.org" "~/.config/doom/"
   #+end_src

2. Tangle the content of the file using the builtin shortcut =C-c C-v t=, or the function
   #+begin_src emacs-lisp :tangle no
     (org-babel-tangle)
   #+end_src

3. Make sure doom config is synchronized (if =~.config/emacs/bin= is already in your path you can omit that part)
   #+begin_src sh :tangle :no
     ~/.config/emacs/bin/doom sync
   #+end_src

4. Load the new config inside doom emacs using =SPC h r r=, or the function
   #+begin_src emacs-lisp :tangle no
     (doom/reload)
   #+end_src
** Importing original files header
#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Matteo Rogora"
      user-mail-address "matteo.rogora@live.it")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
; (setq doom-theme 'doom-one) ; using catpuccin

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package!'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>

** Importing original modules
Load default modules found inside =init.el=, this also comes unchanged from the original init.el

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures        ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs ; enabled          ; a project drawer, like neotree but cooler
       unicode ; enabled          ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave) ; enabled  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm ; enabled             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux ; enabled             ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* Package management
Initialize the built-in package manager
#+begin_src emacs-lisp :tangle packages.el
  (require 'package)
#+end_src

** MELPA
   Add MELPA to the list of repositories.
#+begin_src emacs-lisp :tangle packages.el
  (add-to-list 'package-archives '("melpa-stable" . "https://melpa.org/packages/"))
#+end_src

** Init
Once the early package management configuration is done, load and activate packages.
#+begin_src emacs-lisp :tangle packages.el 
  (package-initialize)
#+end_src

** use-package
Ensure that [[https://github.com/jwiegley/use-package!][use-package]] is installed.

#+begin_src emacs-lisp :tangle packages.el
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

And make absolutely sure that it is evaluated, even if this file gets compiled (read the [[help:eval-when-compile][manual page]] for more information).

#+begin_src emacs-lisp :tangle packages.el
  (eval-when-compile
    (require 'use-package))
#+end_src

* Packages
** Company

Setup Company for coding suggestion

#+begin_src emacs-lisp :tangle packages.el
  (package! company)
#+end_src

Also set commands to select and confirm suggestion

#+begin_src emacs-lisp :tangle config.el
  (use-package! company
    :ensure
    :bind
    (:map company-active-map
                ("C-n". company-select-next)
                ("C-p". company-select-previous)
                ("M-<". company-select-first)
                ("M->". company-select-last))
    (:map company-mode-map
          ("<tab>". tab-indent-or-complete)
          ("TAB". tab-indent-or-complete)))
#+end_src

** YASnippet
Install YASnippet to define custom snippets (mostly emacs-lisp block)

#+begin_src emacs-lisp :tangle packages.el
  (package! yasnippet)
#+end_src

#+begin_src emacs-lisp :tangle config.el
  (use-package! yasnippet
      :ensure
      :config
      (yas-reload-all)
      (add-hook 'prog-mode-hook 'yas-minor-mode)
      (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src
** Other funny config for company and YASnippet

#+begin_src emacs-lisp :tangle config.el
  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
        (company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))
#+end_src

** Treemacs

Because I like browsing folders

#+begin_src emacs-lisp :tangle config.el
  (use-package! treemacs
    :ensure
    :bind
    (:map global-map
          ;; be carefull as these will be applied globally and may be
          ;; conflicting with other shortcuts in the future
          ("C-c C-r" . treemacs)
          ("C-c r" . treemacs-select-window))
    :config
    ;; Prevent treemacs from being considered as a different window
    ;; can be annoying when cycling between windows (eg: eldoc-buffer)
    (setq treemacs-is-never-other-window t))
#+end_src

** Programming support
*** lsp-mode

Setup lsp-mode, for now only used to work with rust-analyzer

#+begin_src emacs-lisp :tangle packages.el
  (package! lsp-mode)
#+end_src

Run clippy on save

#+begin_src emacs-lisp :tangle config.el
  (use-package! lsp-mode
    :ensure
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; This controls the overlays that display type and other hints inline. Enable
    ;; / disable as you prefer. Well require a `lsp-workspace-restart' to have an
    ;; effect on open projects.
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
      (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src
*** lsp-ui

Shows interpretation of every line and types on the side

#+begin_src emacs-lisp :tangle packages.el
  (package! lsp-ui)
#+end_src

#+begin_src emacs-lisp :tangle config.el
  (use-package! lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))
#+end_src
*** flyckeck

Underline errors and show error message when hover

#+begin_src emacs-lisp :tangle packages.el
  (package! flycheck)
#+end_src

#+begin_src emacs-lisp :tangle config.el
  (use-package! flycheck :ensure)
#+end_src
*** rust
Following Krahn's [[https://github.com/rksm/emacs-rust-config][emacs-rust-config]]

**** rustic

Install package

#+begin_src emacs-lisp :tangle packages.el
  (package! rustic)
#+end_src

And set basic keybinding

#+begin_src emacs-lisp :tangle config.el
  (use-package! rustic
      :ensure
      :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status)
                ("C-c C-c e" . lsp-rust-analyzer-expand-macro)
                ("C-c C-c d" . dap-hydra)
                ("C-c C-c h" . lsp-ui-doc-glance)
                ;; Quickly open eldoc-doc-buffer while in rustic mode, by putting this here preventsconflicts
                ("C-c C-c d" . eldoc-doc-buffer))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))
#+end_src

**** rustic-mode-hook

Add hook to rustic-mode to auto save on exit, visit [[https://github.com/brotzeit/rustic/issues/253][the relative issue]] to know more

#+begin_src emacs-lisp :tangle config.el
  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+end_src

* Modes
Ensure certain modes are installed
** toml-mode
#+begin_src emacs-lisp :tangle packages.el
  (package! toml-mode)
#+end_src
** rust-mode

#+begin_src emacs-lisp :tangle packages.el
  (package! rust-mode)
#+end_src
** dap-mode
Used to debug rust code

#+begin_src emacs-lisp :tangle packages.el
  (package! dap-mode)
#+end_src
* Custom config
** Relative line numbers
I use relative line numbers since they are much easier to work with when doing copy-paste in evil-mode

#+begin_src emacs-lisp :tangle config.el
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src

** JetBrainsMono Nerd Font
This is the font I use system-wide, use it in emacs too to make everything coherent

#+begin_src emacs-lisp :tangle config.el
  (setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 12))
#+end_src
** Custom snippets
*** code_block emacs-lisp
Set YASnippet to autosuggest code block for emacs

I will keep this snippet here, I *do NOT* want to rewrite this org file without it :)

#+begin_src emacs-lisp :tangle config.el
  (yas-define-snippets 'org-mode
    '(("eml" "#+begin_src emacs-lisp :tangle $1.el\n  $2\n#+end_src" "emacs-lisp")))
#+end_src

** Keybinding
*** org-agenda
**** Quick open agenda-view menu

Quick agenda-view opening with =C-c a=

#+begin_src emacs-lisp :tangle config.el
  (define-key global-map "\C-ca" 'org-agenda)
#+end_src
**** Open org-agenda main file

The main file is an org file named =<current_year>.org=, inside the =~/Nextcloud/org-agenda/=

#+begin_src emacs-lisp :tangle config.el
  (defun org-agenda-file-current ()
      "Open the current agenda file <year>.org"
      (interactive)
      (find-file (concat
                  "~/Nextcloud/org-agenda/"
                  (format-time-string "%Y")
                  ".org")))
#+end_src

Add a keybinding to quickly open it with =C-c s=, mnemonically it sucks, but =s= is close to =a= on the keyboard

#+begin_src emacs-lisp :tangle config.el
  (define-key global-map "\C-cs" 'org-agenda-file-current)
#+end_src
*** emacs config

Define the function to open config file, just to have its name appear into doom menu

#+begin_src emacs-lisp :tangle config.el
  (defun org-config ()
    "Open the default org config file"
    (interactive)
    (find-file "~/.config/doom/config.org"))
#+end_src

Open doom =config.org= (this file) with =C-c c=

#+begin_src emacs-lisp :tangle config.el
  (define-key global-map "\C-cc" 'org-config)
#+end_src
*** vterm

open vterm buffer with =C-c v=

#+begin_src emacs-lisp :tangle config.el
  (define-key global-map "\C-cv" 'vterm)
#+end_src

** Org agenda directory

Set the path for the org-agenda files

#+begin_src emacs-lisp :tangle config.el
  (setq
    org-agenda-files '("~/Nextcloud/org-agenda"))
#+end_src
