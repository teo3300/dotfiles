# -*- eval: (display-line-numbers-mode); -*-
#+STARTUP: overview hidestars
#+PROPERTY: header-args :results silent :tangle yes

* Packages management
Initialize built-in package manager and =use package=
#+begin_src emacs-lisp
  (require 'package)
#+end_src

** Initialize MELPA
#+begin_src emacs-lisp
  (add-to-list
    'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src

** use-package
*** use-package
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
#+end_src
*** ensure
#+begin_src emacs-lisp
  (require 'use-package-ensure)
  ;; (setq use-package-always-ensure t) ;; haha funny
#+end_src

* Bare minimum
** [[https://github.com/emacs-evil/evil][Evil]] mode
Install and enable evil mode and use undo-tree
(I REFUSE to use emacs without vim keybindings)
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))

(use-package evil
  :ensure t
  ;:demand t
  :config
  (evil-mode 1)
  (evil-set-undo-system 'undo-tree))
#+end_src

** Line numbering
I use relative line numbers since they are much easier to work with
when doing copy-paste in evil-mode
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode)
#+end_src

** Column 80 ruler                                                   :Broken:
Use this as a soft boundary for when writing code
#+begin_src emacs-lisp :tangle no
  (global-display-fill-column-indicator-mode)
  (setq display-fill-column-indicator-column 80)
#+end_src

** Global keybindings
*** emacs config
Quick open emacs config file
#+begin_src emacs-lisp
  (defun org-config ()
    "Open the default org config file"
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+end_src
open =config.org= (this file) whith =C-c c=

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c c") 'org-config)
#+end_src

*** Better resize keys 
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>")
                  'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>")
                  'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>")
                  'shrink-window)
  (global-set-key (kbd "S-C-<up>")
                  'enlarge-window)
#+end_src

** org agenda
*** Add custom location to the agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/agenda"))
#+end_src

*** keybinding
**** quick open agenda-view menu
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c a") 'org-agenda)
#+end_src

**** quick open org-agenda main file
Quick open agenda main file and agenda-view menu
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c s")
    (find-file "~/org/agenda/index.org"))
#+end_src

*** Custom todo list
#+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence
        "TODO(t)" "PROJ(p)" "IDEA(i)" "READ(r)"
        "|" "DONE(d)" "KILL(k)") ; standard
      (sequence
        "[ ](T)" "[-](S)" "[?](W)"
        "|" "[X](D)")
      (sequence
        "CHCK(c)"
        "|" "YES(y)" "NO(n)")))
#+end_src
*** Use priorities A-E
Having just 3 priorities is really limiting
#+begin_src emacs-lisp
  (setq org-lowest-priority ?E)
#+end_src
* Style
** Catpuccin
Just like this theme and I use it almost system-wide
#+begin_src emacs-lisp :tangle yes
  (use-package catppuccin-theme
    :ensure t)
  (load-theme 'catppuccin :no-confirm)
#+end_src

** olivetti
When I want the 80 columns constraint to be not only a soft one
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :bind
    (:map global-map
      ("C-c o" . olivetti-mode))
    :config
    (setq olivetti-body-width 80))
#+end_src

** Use spaces for indentation
#+begin_src emacs-lisp
  (set-default 'indent-tabs-mode nil)
#+end_src

* Packages
** suggestions & completion
*** company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook
    (after-init . global-company-mode)
    :custom
    ;; such config, much I understand nothing
    (company-minimum-prefix-length 2) ;; suggestion after 2 characters
    (company-idle-delay 0.0)          ;; no delay in company pop-up
    (company-selection-wrap-around t) ;; wrap around menu
    (company-show-numbers t)
    (company-require-match nil)
    (company-dabbrev-downcase nil)
    :bind
    (:map company-active-map
          ("C-n". company-select-next)
          ("C-p". company-select-previous)
          ("M-<". company-select-first)
          ("M->". company-select-last))
    (:map company-mode-map
          ("<tab>". tab-indent-or-complete)
	  ("TAB". tab-indent-or-complete)))
#+end_src

*** YASnippet
Useful snippets to avoid writing too much
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :after (yasnippet-snippets)
    :config
    (yas-reload-all)
    (yas-global-mode)
    ;; Set snippets folder
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    ;; Run yasnippet in both text and prog mode
    :hook
    (prog-mode-hook . yas-minor-mode)
    (text-mode-hook . yas-minor-mode)) 
#+end_src

*** Weird set of company-yas integration function
#+begin_src emacs-lisp
  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
        (company-complete-common)))
  
  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "::") t nil)))))
  
  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))
  
  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))  
#+end_src

*** flyspell
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

*** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src

** which-key
I have a REALLY bad memory
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** vertico
Better search
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

** lsp-mode
=lsp-mode= for now only used to work with rust-analyzer
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :custom
#+end_src

=rust-analyzer= for lsp-mode
#+begin_src emacs-lisp
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-inlay-hint-enable t)
  ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil) 
 #+end_src
 
 use =lsp-ui=
 #+begin_src emacs-lisp
  :hook
  (lsp-mode-hook . lsp-ui-mode))
#+end_src

** lsp-ui
Inline lsp overlay
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))
#+end_src

** language-specific
*** rust
**** rustic
extension of rust-mode, with some additional features
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :hook
    (rustic-mode-hook . rk/rustic-mode-hook))

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
#+end_src

#+begin_src emacs-lisp
  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+end_src

** org-roam
#+begin_src emacs-lisp :tangle no
  (use-package org-roam
    :ensure nil
    :config
    (setq org-roam-directory (file-truename "~/org/roam"))
    :bind
    (:map global-map
      ("C-c n f" . org-roam-node-find)
      ("C-c n i" . org-roam-node-insert)))
#+end_src

** Modes
*** rust-mode
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src

*** markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :config
    (add-to-list
      'auto-mode-alist
      '("\\.md\\'" . markdown-mode)))
#+end_src

* Org - LaTeX export

Eval all buffer in the file
#+begin_src emacs-lisp :tangle no
  (defun run-src-blocks-before-export ()
    "Execute src blocks in the file before exporting LaTeX."
    (org-babel-execute-buffer))
#+end_src

Execute the specified function before the export process
#+begin_src emacs-lisp :tangle no
(add-hook 'org-export-before-processing-functions 'run-src-blocks-before-export)
#+end_src
